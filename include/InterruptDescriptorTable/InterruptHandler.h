#pragma once

#include <stdint.h>

namespace cosmo
{
namespace interrupt
{

/*!
 * This enum aliases the IRQ types that can be emitted by the PIC master/slave.
 */
enum Irq
{
    kTimer = 0,
    kKeyboard,
    kPic2,
    kCom1,
    kCom2,
    kLpt2,
    kFloppyDisk,
    kLpt1,
    kRealTimeClock,
    kGeneralIo1,
    kGeneralIo2,
    kGeneralIo3,
    kGeneralIo4,
    kGeneralIo5,
    kCoProcessor,
    kIdeBus1,
    kIdeBus2
}; // end Irq

/*!
 * \struct CPURegisters
 *
 * On interrupt, this struct stores the CPU register context.
 */
struct InterruptContext
{
    uint32_t cr2;
    uint32_t gs;
    uint32_t fs;
    uint32_t ds;
    uint32_t es;
    uint32_t edi;
    uint32_t esi;
    uint32_t ebp;
    uint32_t ebx;
    uint32_t edx;
    uint32_t ecx;
    uint32_t eax;
    uint32_t int_no;
    uint32_t err_code;
    uint32_t cs;
    uint32_t eflags;
    uint32_t esp;
    uint32_t ss;
}; // end InterruptContext

/*!
 * \brief CPU exception handler routine.
 *
 * Hang the computer after printing an exception message to the screen.
 */
extern "C" void isr_handler(struct InterruptContext* int_context);

/* Pointers to the ISRs generated by the macros in InterruptHandler.nasm. */
extern "C" void isr0();
extern "C" void isr1();
extern "C" void isr2();
extern "C" void isr3();
extern "C" void isr4();
extern "C" void isr5();
extern "C" void isr6();
extern "C" void isr7();
extern "C" void isr8();
extern "C" void isr9();
extern "C" void isr10();
extern "C" void isr11();
extern "C" void isr12();
extern "C" void isr13();
extern "C" void isr14();
extern "C" void isr15();
extern "C" void isr16();
extern "C" void isr17();
extern "C" void isr18();
extern "C" void isr19();
extern "C" void isr20();
extern "C" void isr21();
extern "C" void isr22();
extern "C" void isr23();
extern "C" void isr24();
extern "C" void isr25();
extern "C" void isr26();
extern "C" void isr27();
extern "C" void isr28();
extern "C" void isr29();
extern "C" void isr30();
extern "C" void isr31();

/*!
 * \brief Hardware interrupt handler routine.
 *
 * irq_handler() dispatches the appropriate IRQ handler depending on the
 * IRQ that is detected.
 */
extern "C" void irq_handler(struct InterruptContext* int_context);

/* Pointers to the IRQs generated by the macros in InterruptHandler.nasm. */
extern "C" void irq0();
extern "C" void irq1();
extern "C" void irq2();
extern "C" void irq3();
extern "C" void irq4();
extern "C" void irq5();
extern "C" void irq6();
extern "C" void irq7();
extern "C" void irq8();
extern "C" void irq9();
extern "C" void irq10();
extern "C" void irq11();
extern "C" void irq12();
extern "C" void irq13();
extern "C" void irq14();
extern "C" void irq15();
} // end interrupt
} // end cosmo
