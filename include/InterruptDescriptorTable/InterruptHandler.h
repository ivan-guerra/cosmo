#pragma once

#include <stdint.h>

/*!
 * \struct CPURegisters
 *
 * On interrupt, this struct stores the CPU register context.
 */
struct InterruptContext
{
    uint32_t cr2;
    uint32_t gs;
    uint32_t fs;
    uint32_t ds;
    uint32_t es;
    uint32_t edi;
    uint32_t esi;
    uint32_t ebp;
    uint32_t ebx;
    uint32_t edx;
    uint32_t ecx;
    uint32_t eax;
    uint32_t int_no;
    uint32_t err_code;
    uint32_t cs;
    uint32_t eflags;
    uint32_t esp;
    uint32_t ss;
}; // end InterruptContext

/*!
 * \brief CPU exception handler routine.
 *
 * Hang the computer after printing an exception message to the screen.
 */
extern "C" void interrupt_handler(struct InterruptContext* int_context);

/* Pointers to the ISRs generated by the macros in ExceptionHandler.nasm. */
extern "C" void isr0();
extern "C" void isr1();
extern "C" void isr2();
extern "C" void isr3();
extern "C" void isr4();
extern "C" void isr5();
extern "C" void isr6();
extern "C" void isr7();
extern "C" void isr8();
extern "C" void isr9();
extern "C" void isr10();
extern "C" void isr11();
extern "C" void isr12();
extern "C" void isr13();
extern "C" void isr14();
extern "C" void isr15();
extern "C" void isr16();
extern "C" void isr17();
extern "C" void isr18();
extern "C" void isr19();
extern "C" void isr20();
extern "C" void isr21();
extern "C" void isr22();
extern "C" void isr23();
extern "C" void isr24();
extern "C" void isr25();
extern "C" void isr26();
extern "C" void isr27();
extern "C" void isr28();
extern "C" void isr29();
extern "C" void isr30();
extern "C" void isr31();
